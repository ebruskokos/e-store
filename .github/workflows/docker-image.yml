name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the code
        uses: actions/checkout@v3   # This step checks out your repository

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: "ebruskokos"       # Hardcoded username
          password: "dckr_pat_zZazXM6Z6BIEaQTO9VS-6Y4zxP8"  # Hardcoded token

      -
        name: Determine version using Semantic Versioning
        id: get_version
        run: |
          git fetch --tags
          
          # Start checking from 1.0.0 if no tags exist
          latest_tag=$(git tag --list --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            major=1
            minor=0
            patch=0
          else
            major=$(echo $latest_tag | cut -d '.' -f1)
            minor=$(echo $latest_tag | cut -d '.' -f2)
            patch=$(echo $latest_tag | cut -d '.' -f3)
            
            # Check if patch is less than 12, then increment
            if [ "$patch" -lt 500 ]; then
              patch=$((patch + 1))
            else
              patch=0
              minor=$((minor + 1))
            fi
          fi

          # Check for existing images on Docker Hub before using the new version
          new_version="$major.$minor.$patch"
          
          while true; do
            # Attempt to pull the image with this tag to check if it already exists
            if docker pull ebruskokos/e-store:"$new_version" > /dev/null 2>&1; then
              # If the image exists, increment the patch number
              if [ "$patch" -lt 12 ]; then
                patch=$((patch + 1))
              else
                patch=0
                minor=$((minor + 1))
              fi
              new_version="$major.$minor.$patch"
            else
              # If the image does not exist, this is the version to use
              break
            fi
          done

          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "The new version is: $new_version"

      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ebruskokos/e-store:${{ env.new_version }}
            ebruskokos/e-store:latest
